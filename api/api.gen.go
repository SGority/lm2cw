// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
	"net/http"
	"strings"
)

// ErrResponse defines model for ErrResponse.
type ErrResponse struct {

	// The HTTP response code
	HTTPStatusCode int `json:"HTTPStatusCode"`

	// The message explaining the error
	Msg string `json:"msg"`

	// The request id to track errors
	RequestID string `json:"requestID"`
}

// Error defines model for Error.
type Error ErrResponse

type ServerInterface interface {
	// Sync devices (GET /sync_devices)
	GetSyncDevices(w http.ResponseWriter, r *http.Request)
}

// GetSyncDevices operation middleware
func GetSyncDevicesCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	r.Group(func(r chi.Router) {
		r.Use(GetSyncDevicesCtx)
		r.Get("/sync_devices", si.GetSyncDevices)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/3yTwY7UMAyGXyUyHKvJCMQlN8SOoBIrrXZ6QwiF1NtmaZNguytGo747SpstsDPiltq/",
	"P/+J3TO4OKYYMAiDOQMhpxgYl48DUaR8cDEIBslHm9LgnRUfg37kGHKMXY+jzafXhA9g4JX+Q9VrlvWB",
	"6L7QYZ7nClpkRz5lFBiAHCra0nyTm/ML8eJMPZuFChLFhCR+Nf6pae6OYmXiD7G9Ut70qLJmIyiXdRXI",
	"KSEY8EGwQ4K5gpG76/UjMtsOFf5Kg/XBh05JjwqXN9tILORDl0GEPydkqW+u40pa+VZJVELW/VhZfAkr",
	"NE/YgvmyWPybX728/9eNEL8/opP1+X14iJde7g/HRr2/q6GCwTssrx/smMtv60Z9LtEKJhrAQC+S2Ggd",
	"EwaOEzncRep0KWZ9Wzf5+uJlyIgV/YTEa7/9br/bZ0Gut8mDgbdLqIJkpV/GqfkU3LcWn7xb59vhsot5",
	"5Msm1i0Y+IhyPAV3U2TVv7v8Zr+/vCxPziFzbv9uzV9b4I2j1x9iWdRpHC2dwEDuqZ69/Sczz78DAAD/",
	"/6WW0chsAwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
