// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
)

// ErrResponse defines model for ErrResponse.
type ErrResponse struct {

	// The HTTP response code
	HTTPStatusCode int `json:"HTTPStatusCode"`

	// The message explaining the error
	Msg string `json:"msg"`

	// The request id to track errors
	RequestID string `json:"requestID"`
}

// Error defines model for Error.
type Error ErrResponse

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Sync devices
	// (GET /sync_devices)
	GetSyncDevices(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetSyncDevices operation middleware
func (siw *ServerInterfaceWrapper) GetSyncDevices(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, "JWT.Scopes", []string{"exec_test"})

	siw.Handler.GetSyncDevices(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	r.Group(func(r chi.Router) {
		r.Get("/sync_devices", wrapper.GetSyncDevices)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/3STwW7bMAyGX0XgdjTqYMMuug1rsGVYgaIxsEMQFKrMOupiSSPpokHgdx9kqV7WZDeZ",
	"/PmJ/EUfwYY+Bo9eGPQRCDkGzzh9LIkCpYMNXtBLOpoY984accHXTxx8irHdYW/S6T3hI2h4V/+l1jnL",
	"9ZLortBhHMcKWmRLLiYUaIAUKtpy+SzXxzfiqTP12ixUEClEJHG58W9Nc7sWIwN/Ce2F8maHKmlmgrJJ",
	"V4EcIoIG5wU7JBgr6Lm7XN8js+lQ4UvcG+ed75TsUOHk2UxiIee7BCL8PSDL6voyrqSVa5UEJWTsr8zi",
	"c1ihOcIW9GZq8ZRfvZ1/OxPCwxNayVajHcjJYZ0sz7Z9/9nMz5nUD2gIT4bZicT8dM4/hvM57pbrRn2+",
	"XUEFe2exvJw3E+xm1agfJVrBQPsCZF3XIaLnMJDFq0BdXYq5vlk1yTpxsk+IjH5G4nzf4mpxtUiCVG+i",
	"Aw0fp1AF0chumqnmg7f3LT47m4fscNrjtC7TFq9a0PAVZX3w9rrIqn//gw+LxfmwPFiLzOn6Tzl/afln",
	"Tp1/plPnQW+K5xvAF7T3giywHbcV8ND3hg6gIbWlXtsf/58Zxz8BAAD//1EXhBvLAwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
