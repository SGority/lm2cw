// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
	"net/http"
	"strings"
)

// ErrResponse defines model for ErrResponse.
type ErrResponse struct {

	// The HTTP response code
	HTTPStatusCode int `json:"HTTPStatusCode"`

	// The message explaining the error
	Msg string `json:"msg"`

	// The request id to track errors
	RequestID string `json:"requestID"`
}

// Error defines model for Error.
type Error ErrResponse

type ServerInterface interface {
	// Sync devices (GET /sync)
	GetSync(w http.ResponseWriter, r *http.Request)
}

// GetSync operation middleware
func GetSyncCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	r.Group(func(r chi.Router) {
		r.Use(GetSyncCtx)
		r.Get("/sync", si.GetSync)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/3STzW7bMAzHX0XgdjRio8MuuhVbsAVYgaDxbdhBk1lbrS1ppJwtCPzuA2XX3Zr0RvHj",
	"R/4l8Qw2DDF49IlBn4GQY/CM+bAlCiSGDT6hT2KaGHtnTXLBl48cvPjYdjgYsd4TPoCGd+ULtZyjXG6J",
	"7hc6TNNUQINsyUVBgYZbr0b/5MNvr1D6qs6wCtaORNio4FXqUDHSEWmj1L5Hw3LG7B+Q2bSo3Jz2rGID",
	"0mcZYFG0zqDPrybIctdaKCBSiEjJzbfxta73h2TSyJ9Cc6W87lBJzkpQVvIKSKeIoMH5hC0STAUM3F6v",
	"f9aBf2JvnHe+zXryhbyQOJHzrYAIf43Iaff5Om4JK9eoFFQiY59mFl/CFpojbEB/zyP+yy9e6/+xEsLP",
	"R7RpflPnH8LlLPfbQ61u9zsooHcWl9v3ZpDyu12tvi3eAkbqQUOXUmRdliGi5zCSxU2gtlyKubzb1SI/",
	"udQLYkYfkXjuV22qTSUJUm+iAw0fsquAaFKXn7Pkk7ditJg/tjx1/ta7BjR8wXSQePH/RtxUN5fqeLQW",
	"maXfx6p6aw1WTjmvVf6Z4zAYOoEGaaYaPDqLGfRWZJr+BgAA//+49/aXsgMAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
